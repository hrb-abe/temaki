// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Checkbox should match previous snapshot 1`] = `
<ThemeProvider
  theme={
    Object {
      "colors": Object {
        "grayScale": Object {
          "S0": "rgb(255, 255, 255)",
          "S10": "rgb(234, 234, 234)",
          "S100": "rgb(51, 51, 51)",
          "S20": "rgb(214, 214, 214)",
          "S30": "rgb(193, 193, 193)",
          "S40": "rgb(173, 173, 173)",
          "S5": "rgb(245, 245, 245)",
          "S50": "rgb(153, 153, 153)",
          "S60": "rgb(133, 133, 133)",
          "S70": "rgb(112, 112, 112)",
          "S80": "rgb(92, 92, 92)",
          "S90": "rgb(71, 71, 71)",
        },
        "primary": Object {
          "N20": "rgb(92, 92, 92)",
          "N40": "rgb(133, 133, 133)",
          "N60": "rgb(173, 173, 173)",
          "N80": "rgb(214, 214, 214)",
          "N95": "rgb(245, 245, 245)",
          "P20": "rgb(41, 41, 41)",
          "P40": "rgb(31, 31, 31)",
          "P60": "rgb(20, 20, 20)",
          "P80": "rgb(10, 10, 10)",
          "P95": "rgb(0, 0, 0)",
          "default": "rgb(51, 51, 51)",
        },
        "text": Object {
          "default": "#333",
        },
        "utilities": Object {
          "blue": "rgb(48, 120, 191)",
          "highlightGreen": "rgb(114, 206, 92)",
          "paleBlue": "rgb(245, 249, 252)",
          "paleGreen": "rgb(248 ,252, 247)",
          "paleRed": "rgb(253, 246, 246)",
          "red": "rgb(224, 85, 72)",
        },
      },
      "shadows": Object {
        "L1": "0 0 2px 0 rgba(0, 0, 0, 0.16)",
        "L2": "0 1px 3px 0 rgba(0, 0, 0, 0.16)",
        "L3": "0 2px 5px 0 rgba(0, 0, 0, 0.16)",
        "L4": "0 3px 8px 0 rgba(0, 0, 0, 0.16)",
        "L5": "0 5px 11px 0 rgba(0, 0, 0, 0.16)",
      },
      "typography": Object {
        "pc": Object {
          "body": Object {
            "L": "16px",
            "S": "12px",
            "XL": "18px",
            "default": "14px",
          },
          "heading": Object {
            "H1": "24px",
            "H2": "22px",
            "H3": "20px",
            "H4": "18px",
            "H5": "16px",
            "H6": "14px",
          },
        },
        "sp": Object {
          "body": Object {
            "L": "16px",
            "S": "12px",
            "XL": "18px",
            "default": "14px",
          },
          "heading": Object {
            "H1": "24px",
            "H2": "22px",
            "H3": "20px",
            "H4": "18px",
            "H5": "16px",
            "H6": "14px",
          },
        },
      },
    }
  }
>
  <Memo()
    onClick={[MockFunction]}
  >
    <styled.div
      data-test="nocheck-box"
      onClick={[MockFunction]}
      tabIndex={1}
    >
      <StyledComponent
        data-test="nocheck-box"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bdVaJa",
              "isStatic": true,
              "lastClassName": "gkcNzX",
              "rules": Array [
                "
  display: inline-flex;
  align-items: center;
  cursor: pointer;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bdVaJa",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        onClick={[MockFunction]}
        tabIndex={1}
      >
        <div
          className="sc-bdVaJa gkcNzX"
          data-test="nocheck-box"
          onClick={[MockFunction]}
          tabIndex={1}
        >
          <styled.div
            dangerouslySetInnerHTML={
              Object {
                "__html": undefined,
              }
            }
          >
            <StyledComponent
              dangerouslySetInnerHTML={
                Object {
                  "__html": undefined,
                }
              }
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": false,
                    "lastClassName": "cGYhMO",
                    "rules": Array [
                      "
  display: flex;
  align-items: center;
  justify-content: center;
  height: 24px;
  width: 24px;

  & .primary {
    fill: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-bwzfXH cGYhMO"
                dangerouslySetInnerHTML={
                  Object {
                    "__html": undefined,
                  }
                }
              />
            </StyledComponent>
          </styled.div>
          <styled.span>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htpNat",
                    "isStatic": false,
                    "lastClassName": "lnTVXj",
                    "rules": Array [
                      "
  height: 100%;
  font-size: 14px;
  padding-left: 4px;
  color: ",
                      [Function],
                      ";
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htpNat",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <span
                className="sc-htpNat lnTVXj"
              />
            </StyledComponent>
          </styled.span>
        </div>
      </StyledComponent>
    </styled.div>
  </Memo()>
</ThemeProvider>
`;
